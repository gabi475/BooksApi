using BooksAPI.Database;
using BooksAPI.Models;
using BooksAPI.Services.Interfaces;
using System.Collections.Generic;
using System.Linq;

namespace BooksAPI.Services.Implementation
{
    public class BookService : IBookService
    {
        private BookAPIContext _context;
        public BookService(BookAPIContext context)
        {
            _context = context;
        }
        public void AddBook(Book book)
        {
            // id is generated by concatenating 'B' with n, where n is (number of existing books in database + 1)
            book.Id = string.Format("B{0}", (_context.Books.Count() + 1).ToString());
            _context.Books.Add(book);
            _context.SaveChanges();
        }

        public void EditBook(string id, Book book)
        {
            var existingBook = _context.Books.FirstOrDefault(o => o.Id == id);
            if (existingBook != null)
            {
                // update existing book with new provided properties
                existingBook.Price = book.Price;
                existingBook.Author = book.Author;
                existingBook.Title = book.Title;
                existingBook.Genre = book.Genre;
                existingBook.PublishDate = book.PublishDate;
                existingBook.Description = book.Description;
                _context.SaveChanges();
            }
        }

        // return books ordered by propertyName if book property contains given substring 'search'
        // an error is thrown if property doesn't exist
        public List<Book> SearchByProperty(string propertyName, string search)
        {
            search = search.ToUpper();
            switch (propertyName)
            {
                case "id":
                    return _context.Books.Where(o => o.Id.ToUpper().Contains(search)).OrderBy(o => o.Id).ToList();
                case "author":
                    return _context.Books.Where(o => o.Author.ToUpper().Contains(search)).OrderBy(o => o.Author).ToList();
                case "title":
                    return _context.Books.Where(o => o.Title.ToUpper().Contains(search)).OrderBy(o => o.Title).ToList();
                case "description":
                    return _context.Books.Where(o => o.Description.ToUpper().Contains(search)).OrderBy(o => o.Description).ToList();
                case "genre":
                    return _context.Books.Where(o => o.Genre.ToUpper().Contains(search)).OrderBy(o => o.Genre).ToList();
                case "price":
                    return SearchByPrice(search);
                default:
                    throw new System.Exception(string.Format("Property {0} not found", propertyName));
            }
        }

        public List<Book> GetAll()
        {
            return _context.Books.ToList();
        }

        public Book GetById(string id)
        {
            return _context.Books.FirstOrDefault(b => b.Id == id);
        }

        public List<Book> SortByProperty(string propertyName)
        {
            switch (propertyName)
            {
                case "id":
                    return _context.Books.OrderBy(o => o.Id).ToList();
                case "author":
                    return _context.Books.OrderBy(o => o.Author).ToList();
                case "title":
                    return _context.Books.OrderBy(o => o.Title).ToList();
                case "description":
                    return _context.Books.OrderBy(o => o.Description).ToList();
                case "genre":
                    return _context.Books.OrderBy(o => o.Genre).ToList();
                case "price":
                    return _context.Books.OrderBy(o => o.Price).ToList();
                case "published":
                    return _context.Books.OrderBy(o => o.PublishDate).ToList();
                default:
                    throw new System.Exception(string.Format("Property {0} not found", propertyName));
            }
        }

        private List<Book> SearchByPrice(string priceAsString)
        {
            if (!IsRange(priceAsString))
            {
                decimal price = decimal.Parse(priceAsString);
                return _context.Books.Where(o => o.Price == price).ToList();
            }

            //33.0&35.0
            var splitted = priceAsString.Split('&');
            // ["33.0", "35.0"]
            decimal from = decimal.Parse(splitted[0]);
            decimal to = decimal.Parse(splitted[1]);
            return _context.Books.Where(o => o.Price >= from && o.Price <= to).OrderBy(o => o.Price).ToList();
        }

        private bool IsRange(string price)
        {
            return price.Contains('&');
        }

        public List<Book> SearchByPublishedDate(int year, int? month, int? day)
        {
            if (day != null)
            {
                return _context.Books.Where(o => o.PublishDate.Day == day.Value &&
                                            o.PublishDate.Month == month.Value &&
                                            o.PublishDate.Year == year).ToList();
            }
            if (month != null)
            {
                return _context.Books.Where(o => o.PublishDate.Month == month.Value &&
                                           o.PublishDate.Year == year).ToList();
            }
            return _context.Books.Where(o => o.PublishDate.Year == year).ToList();
        }
    }
}